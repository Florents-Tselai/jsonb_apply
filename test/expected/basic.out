-- error messages
select jsonb_apply('"hello"', 'length(text)');
ERROR:  function length does not return text
select jsonb_apply('"hello"', 'gsdgfd(text, text)');
ERROR:  function "gsdgfd(text, text)" does not exist
create function lorem() returns text language sql as $$ select 'lorem ipsum'$$;
-- funcs with nargs=0
select jsonb_apply('"hello"', 'lorem()');
  jsonb_apply  
---------------
 "lorem ipsum"
(1 row)

-- funcs with nargs=1
select jsonb_apply('"hello"', 'lower(text)');
 jsonb_apply 
-------------
 "hello"
(1 row)

select jsonb_apply('"hello"', 'upper(text)');
 jsonb_apply 
-------------
 "HELLO"
(1 row)

select jsonb_apply('"hello"', 'reverse(text)');
 jsonb_apply 
-------------
 "olleh"
(1 row)

select jsonb_apply('"    hELLo  "', 'ltrim(text)');
 jsonb_apply 
-------------
 "hELLo  "
(1 row)

select jsonb_apply('"    hELLo  "', 'rtrim(text)');
 jsonb_apply 
-------------
 "    hELLo"
(1 row)

select jsonb_apply('"    hELLo  "', 'btrim(text)');
 jsonb_apply 
-------------
 "hELLo"
(1 row)

-- funcs with combination of argtypes
select jsonb_apply('"hello world"', 'replace(text, text, text)', 'hello', 'bye');
 jsonb_apply 
-------------
 "bye world"
(1 row)

select jsonb_apply('"Pg"', 'repeat(text, integer)', 3);
 jsonb_apply 
-------------
 "PgPgPg"
(1 row)

select jsonb_apply('"abc~@~def~@~ghi"', 'split_part(text,text,integer)', '~@~', 2);
 jsonb_apply 
-------------
 "def"
(1 row)

-- complex object, just checking for spurious pointers.
select jsonb_apply('{"f": "John", "l": "Doe", "message": "Who are you?", "arr": ["Hello", {"k": "value"}]}', 'lower(text)');
                                      jsonb_apply                                       
----------------------------------------------------------------------------------------
 {"f": "john", "l": "doe", "arr": ["hello", {"k": "value"}], "message": "who are you?"}
(1 row)

select jsonb_apply('{"f": "John", "l": "Doe", "message": "Who are you?", "arr": ["Hello", {"k": "value"}]}', 'upper(text)');
                                      jsonb_apply                                       
----------------------------------------------------------------------------------------
 {"f": "JOHN", "l": "DOE", "arr": ["HELLO", {"k": "VALUE"}], "message": "WHO ARE YOU?"}
(1 row)

select jsonb_apply('{"f": "John", "l": "Doe", "message": "Who are you?", "arr": ["Hello", {"k": "value"}]}', 'reverse(text)');
                                      jsonb_apply                                       
----------------------------------------------------------------------------------------
 {"f": "nhoJ", "l": "eoD", "arr": ["olleH", {"k": "eulav"}], "message": "?uoy era ohW"}
(1 row)

